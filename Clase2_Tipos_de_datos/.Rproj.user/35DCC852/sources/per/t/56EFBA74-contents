---
title: "Tipos de datos"
output: github_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

library(tidyverse)

```

Existen diversos tipos de variables, como las numericas, de texto, de fecha u ordinales.

Para analizarlos, lo primero que debemos hacer es cargar la data tabular, utilizando la funcion read_csv()


```{r cargar data}

data <- read.csv("rankingsATP.csv") 

head(data)

str(data)

```

Vemos que en la tabla registros con datos faltantes, y otros con datos no validos (NA), vamos a validarlo con la funcion summary()

```{r}
summary(data)

```

También nos interea explorar el numero de filas y de columnas de la tabla

```{r}

dim(data)
```

# Pre procesamiento de la data

El pre procesamiento de la data es un conjunto de pasos que debe ejecutarse con un uso especifico, no es un proceso general para la data. 

En este caso el uso específico lo definiremos como: Estudiar la evolución anual del top 10 de jugadores del tenis ATP desde el año 2012.

## Reducción de dimensionalidad y selección de variables

Para simplificar el analisis consideraremos:

- Data desde el año 2012. 
- Variables week_year, rank_number, player_slug

```{r}
# en R base definimos el nuevo objeto data1 al especificar filas y columnas de la data original
# los corchetes cuadrados denotan [fila, columna]
data1 <- data[data$week_year >= 2012, c("week_year", "rank_number", "player_slug")]

dim(data1)

```

El mismo resultado puede obtenerse utilizando un dialecto de R llamado tidyverse

```{r}

data2 <- data %>% 
            filter(week_year >= 2012) %>% 
            select(week_year, rank_number, player_slug)

dim(data2)

```

## Encontrar y tratar con entidades duplicadas 

Si queremos preservar solo las entindades únicas podemos utilizar la funcion unique()

```{r}

unicos <- unique(data2)

dim(unicos)

```

## Muestreo

Para hacer un muestreo simple sin reemplazo podemos usar la funcion sample()

```{r}
# genero un listado de 1000 numeros aleatorios a partir de los valores entre 1 y el numero de registros unicos, sin reperirse
sampleIndex <- sample(1:nrow(unicos),1000, replace = F)

# extraigo las filas correspondientes al lista generado
sampleData <- unicos[sampleIndex,]

dim(sampleData)

```
## Agregación

Si quisiera agregar la el ranking para cada año-jugador, mejor usamos directamente la funcion aggregate

```{r}
# agrego la variable rank_number calculandole la mediana, para cada semana y jugador
agg_df <- aggregate(rank_number ~ week_year + player_slug, data1, mean)

dim(agg_df)

```


## Normalización / Estandarización

Ya tenemos el ranking mediano del año, pero tambien queremos saber la posición relativa que ese ranking en cada año. Para esto debemos dividir el ranking de cada año por el maximo valor de ese año. 

Con esto la variable resultante fluctuará entre 0 y 1. 

```{r}
# calculamos el maximo valor anual con aggregate
max_rank <- aggregate(rank_number ~ week_year, agg_df, max)

# cambio el nombre de rank_number para que no se repita cuando fusione
colnames(max_rank)[2] <- "max"

# fusiono data agregada con los maximos, usando la semana como el id del cruce
agg_df <- merge(agg_df, max_rank, by="week_year")

# genero ranking relativo dividiendo ranking por el maximo de esa semana
agg_df$rank_relative <- agg_df$rank_number / agg_df$max

summary(agg_df)
```


## Discretización 

Crearemos una variable discreta que valdrá 1 en caso que el ranking relativo este en el top10, 0 en caso contrario

```{r}
# variable top10 es igual a una desigualdad, que retorna TRUE o FALSE. Al parsearlo como numeric, TRUE pasa a ser 1 y FALSE a 0
agg_df$top10 <- as.numeric(agg_df$rank_number <= 10)

table(agg_df$top10)
```

### Finalmente puedo analizar al top 10 con un gráfico de evolución
```{r}
#filtro data para el grafico
data_plot <- agg_df %>% filter(top10 == 1) 

ggplot(data_plot, aes(week_year, rank_number, col = player_slug)) + 
  geom_line() + 
  geom_point() + 
  theme(legend.position = "bottom") +
  scale_y_reverse() + 
  ggtitle("Evolucion del top10 ATP entre 2012 y 2017") +
  scale_color_viridis_d()
```



