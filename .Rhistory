knitr::opts_chunk$set(echo = TRUE)
data <- read.csv("data/rankingsATP.csv")
getwd()
data <- read.csv("data/rankingsATP.csv")
list.files()
list.files("data")
data <- read.csv("data/rankingsATP.csv")
data <- read_csv("data/rankingsATP.csv")
library(tidyverse)
data <- read_csv("data/rankingsATP.csv")
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv("data/rankingsATP.csv")
getwd()
data <- read.csv("/data/rankingsATP.csv")
getwd()
list.dirs()
knitr::opts_chunk$set(echo = TRUE)
data <- read_csv("data/rankingsATP.csv")
data <- read.csv("data/rankingsATP.csv")
data <- read.table("data/rankingsATP.csv")
getwd()
library(readr)
rankingsATP <- read_csv("data/rankingsATP.csv")
View(rankingsATP)
data <- read_csv("data/rankingsATP.csv")
knitr::opts_chunk$set(echo = TRUE)
data <- read_csv("data/rankingsATP.csv")
data <- read.csv("data/rankingsATP.csv")
getwd()
data <- read.csv("data/rankingsATP.csv")
list.files("data")
getwd()
knitr::opts_chunk$set(echo = TRUE)
getwd()
library(tidyverse)
library(datasauRus)
install.packages("datasauRus")
library(datasauRus)
datasaurus_dozen %>%
group_by(dataset) %>%
summarize(
mean_x    = mean(x),
mean_y    = mean(y),
std_dev_x = sd(x),
std_dev_y = sd(y),
corr_x_y  = cor(x, y)
)
ggplot(datasaurus_dozen, aes(x=x, y=y, colour=dataset))+
geom_point()+
theme_void()+
theme(legend.position = "none")+
facet_wrap(~dataset, ncol=3)
? cor
datasaurus_dozen %>%
group_by(dataset) %>%
summarize(
mean_x    = mean(x),
mean_y    = mean(y),
std_dev_x = sd(x),
std_dev_y = sd(y),
corr_pears  = cor(x, y, method = "pearson"),
corr_spear  = cor(x, y, method = "spearman"),
corr_kendall  = cor(x, y, method = "kendall"),
simil = simil(list(x, y), method="cosine"),
median_x    = median(x),
median_y    = median(y),
CV_x = sd(x) / mean(x),
CV_y = sd(y) / mean(y),
max_x = max(x),
max_y = max(y)
)
library(proxy)
install.packages("proxy")
datasaurus_dozen %>%
group_by(dataset) %>%
summarize(
mean_x    = mean(x),
mean_y    = mean(y),
std_dev_x = sd(x),
std_dev_y = sd(y),
corr_pears  = cor(x, y, method = "pearson"),
corr_spear  = cor(x, y, method = "spearman"),
corr_kendall  = cor(x, y, method = "kendall"),
simil = simil(list(x, y), method="cosine"),
median_x    = median(x),
median_y    = median(y),
CV_x = sd(x) / mean(x),
CV_y = sd(y) / mean(y),
max_x = max(x),
max_y = max(y)
)
library(proxy)
datasaurus_dozen %>%
group_by(dataset) %>%
summarize(
mean_x    = mean(x),
mean_y    = mean(y),
std_dev_x = sd(x),
std_dev_y = sd(y),
corr_pears  = cor(x, y, method = "pearson"),
corr_spear  = cor(x, y, method = "spearman"),
corr_kendall  = cor(x, y, method = "kendall"),
simil = simil(list(x, y), method="cosine"),
median_x    = median(x),
median_y    = median(y),
CV_x = sd(x) / mean(x),
CV_y = sd(y) / mean(y),
max_x = max(x),
max_y = max(y)
)
list(x, y)
datasaurus_dozen %>%
group_by(dataset) %>%
summarize(
mean_x    = mean(x),
mean_y    = mean(y),
std_dev_x = sd(x),
std_dev_y = sd(y),
corr_pears  = cor(x, y, method = "pearson"),
corr_spear  = cor(x, y, method = "spearman"),
corr_kendall  = cor(x, y, method = "kendall"),
simil = simil(x,y, method="cosine"),
median_x    = median(x),
median_y    = median(y),
CV_x = sd(x) / mean(x),
CV_y = sd(y) / mean(y),
max_x = max(x),
max_y = max(y)
)
simil = simil(datasaurus_dozen$x,datasaurus_dozen$y, method="cosine")
simil = simil(list(datasaurus_dozen$x,datasaurus_dozen$y), method="cosine")
simil = simil(list(x,y))
datasaurus_dozen %>%
group_by(dataset) %>%
summarize(
mean_x    = mean(x),
mean_y    = mean(y),
std_dev_x = sd(x),
std_dev_y = sd(y),
corr_pears  = cor(x, y, method = "pearson"),
corr_spear  = cor(x, y, method = "spearman"),
corr_kendall  = cor(x, y, method = "kendall"),
simil = simil(list(x,y)),
median_x    = median(x),
median_y    = median(y),
CV_x = sd(x) / mean(x),
CV_y = sd(y) / mean(y),
max_x = max(x),
max_y = max(y)
)
stats <- datasaurus_dozen %>%
group_by(dataset) %>%
summarize(
mean_x    = mean(x),
mean_y    = mean(y),
std_dev_x = sd(x),
std_dev_y = sd(y),
corr_pears  = cor(x, y, method = "pearson"),
corr_spear  = cor(x, y, method = "spearman"),
corr_kendall  = cor(x, y, method = "kendall"),
simil = simil(list(x,y)),
median_x    = median(x),
median_y    = median(y),
CV_x = sd(x) / mean(x),
CV_y = sd(y) / mean(y),
max_x = max(x),
max_y = max(y)
)
? simil
summary(pr_DB)
stats <- datasaurus_dozen %>%
group_by(dataset) %>%
summarize(
mean_x    = mean(x),
mean_y    = mean(y),
std_dev_x = sd(x),
std_dev_y = sd(y),
corr_pears  = cor(x, y, method = "pearson"),
corr_spear  = cor(x, y, method = "spearman"),
corr_kendall  = cor(x, y, method = "kendall"),
simil_cos = simil(list(x,y), method = "cosine"),   # funcion simil en la libreria proxy
simil_jac = simil(list(x,y), method = "Jaccard"),   # funcion simil en la libreria proxy
simil_sm = simil(list(x,y), method = "simple matching"),   # funcion simil en la libreria proxy
simil_kul = simil(list(x,y), method = "Kulczynski1"),   # funcion simil en la libreria proxy
dist_euc = dist(list(x,y), method = "Euclidean"),
dist_manh = dist(list(x,y), method = "Manhattan"),
dist_sup = dist(list(x,y), method = "supremum"),
dist_mahal = dist(list(x,y), method = "Mahalanobis"),
median_x    = median(x),
median_y    = median(y),
CV_x = sd(x) / mean(x),
CV_y = sd(y) / mean(y),
max_x = max(x),
max_y = max(y)
)
stats <- datasaurus_dozen %>%
group_by(dataset) %>%
summarize(
mean_x    = mean(x),
mean_y    = mean(y),
std_dev_x = sd(x),
std_dev_y = sd(y),
corr_pears  = cor(x, y, method = "pearson"),
corr_spear  = cor(x, y, method = "spearman"),
corr_kendall  = cor(x, y, method = "kendall"),
simil_cos = simil(list(x,y), method = "cosine"),   # funcion simil en la libreria proxy
simil_jac = simil(list(x,y), method = "Jaccard"),   # funcion simil en la libreria proxy
simil_sm = simil(list(x,y), method = "simple matching"),   # funcion simil en la libreria proxy
simil_kul = simil(list(x,y), method = "Kulczynski1"),   # funcion simil en la libreria proxy
dist_euc = dist(list(x,y), method = "Euclidean"),
dist_manh = dist(list(x,y), method = "Manhattan"),
dist_sup = dist(list(x,y), method = "supremum"),
median_x    = median(x),
median_y    = median(y),
CV_x = sd(x) / mean(x),
CV_y = sd(y) / mean(y),
max_x = max(x),
max_y = max(y)
)
View(stats)
simil(list(datasaurus_dozen$x,datasaurus_dozen$y), method = "simple matching")
simil(list(datasaurus_dozen$x,datasaurus_dozen$y), method = "simple matching") %>% as.numeric()
stats <- datasaurus_dozen %>%
group_by(dataset) %>%
summarize(
mean_x    = mean(x),
mean_y    = mean(y),
std_dev_x = sd(x),
std_dev_y = sd(y),
corr_pears  = cor(x, y, method = "pearson"),
corr_spear  = cor(x, y, method = "spearman"),
corr_kendall  = cor(x, y, method = "kendall"),
simil_cos = simil(list(x,y), method = "cosine") %>% as.numeric(),   # funcion simil en la libreria proxy
simil_jac = simil(list(x,y), method = "Jaccard") %>% as.numeric(),   # funcion simil en la libreria proxy
simil_sm = simil(list(x,y), method = "simple matching") %>% as.numeric(),   # funcion simil en la libreria proxy
simil_kul = simil(list(x,y), method = "Kulczynski1") %>% as.numeric(),   # funcion simil en la libreria proxy
dist_euc = dist(list(x,y), method = "Euclidean") %>% as.numeric(),
dist_manh = dist(list(x,y), method = "Manhattan") %>% as.numeric(),
dist_sup = dist(list(x,y), method = "supremum") %>% as.numeric(),
median_x    = median(x),
median_y    = median(y),
CV_x = sd(x) / mean(x),
CV_y = sd(y) / mean(y),
max_x = max(x),
max_y = max(y)
)
stats %>% glimpse()
View(stats)
ggplot(datasaurus_dozen, aes(x=x, y=y, colour=dataset))+
geom_hist()+
theme_void()+
theme(legend.position = "none")+
facet_wrap(~dataset, ncol=3)
library(ggplot2)
ggplot(datasaurus_dozen, aes(x=x, y=y, colour=dataset))+
geom_hist()+
theme_void()+
theme(legend.position = "none")+
facet_wrap(~dataset, ncol=3)
ggplot(datasaurus_dozen, aes(x=x, y=y, colour=dataset))+
geom_histogram()+
theme_void()+
theme(legend.position = "none")+
facet_wrap(~dataset, ncol=3)
ggplot(datasaurus_dozen, aes(x=x,colour=dataset))+
geom_histogram()+
theme_void()+
theme(legend.position = "none")+
facet_wrap(~dataset, ncol=3)
ggplot(datasaurus_dozen, aes(x=x,colour=dataset))+
geom_histogram()+
theme_void()+
theme(legend.position = "none")+
facet_wrap(~dataset, ncol=3)
ggplot(datasaurus_dozen, aes(x=x,colour=dataset))+
geom_density()+
theme_void()+
theme(legend.position = "none")+
facet_wrap(~dataset, ncol=3)
ggplot(datasaurus_dozen, aes(x=x, y = y, colour=dataset))+
geom_density2d()+
theme_void()+
theme(legend.position = "none")+
facet_wrap(~dataset, ncol=3)
ggplot(datasaurus_dozen, aes(x=x, y = dataset, colour=dataset))+
geom_boxplot()+
theme_void()+
theme(legend.position = "none")+
facet_wrap(~dataset, ncol=3)
ggplot(datasaurus_dozen, aes(x=x, colour=dataset))+
geom_boxplot()+
theme_void()+
theme(legend.position = "none")+
facet_wrap(~dataset, ncol=3)
ggplot(datasaurus_dozen, aes(x=x, colour=dataset))+
geom_violin()+
theme_void()+
theme(legend.position = "none")+
facet_wrap(~dataset, ncol=3)
ggplot(datasaurus_dozen, aes(x=x, y=y, colour=dataset))+
geom_violin()+
theme_void()+
theme(legend.position = "none")+
facet_wrap(~dataset, ncol=3)
ggplot(datasaurus_dozen, aes(x=x, y=y, colour=dataset))+
geom_point() +
theme_void() +
theme(legend.position = "none")+
facet_wrap(~dataset, ncol=3)
ggplot(datasaurus_dozen, aes(x=x, dataset=y, colour=dataset))+
geom_point() +
theme_void() +
theme(legend.position = "none")+
facet_wrap(~dataset, ncol=3)
ggplot(datasaurus_dozen, aes(x=x, y=dataset, colour=dataset))+
geom_point() +
theme_void() +
theme(legend.position = "none")+
facet_wrap(~dataset, ncol=3)
ggplot(datasaurus_dozen, aes(x=x, y=dataset, colour=dataset))+
geom_point() +
theme_void() +
theme(legend.position = "none")+
facet_wrap(~dataset, ncol=1)
ggplot(datasaurus_dozen, aes(x=x, y=dataset, colour=dataset))+
geom_point() +
geom_boxplot() +
theme_void() +
theme(legend.position = "none")+
facet_wrap(~dataset, ncol=1)
ggplot(datasaurus_dozen, aes(x=x, y=dataset, colour=dataset)) +
geom_point() +
geom_boxplot() +
theme_void() +
theme(legend.position = "none")+
facet_wrap(~dataset, ncol=3)
ggplot(datasaurus_dozen, aes(x=x, y=dataset, colour=dataset)) +
geom_point() +
geom_boxplot() +
theme_void() +
theme(legend.position = "none")
ggplot(datasaurus_dozen, aes(x=x, y=dataset, colour=dataset)) +
geom_point() +
geom_boxplot() +
geom_violin() +
theme_void() +
theme(legend.position = "none")
ggplot(datasaurus_dozen, aes(x=x, y=dataset, colour=dataset)) +
geom_point() +
geom_boxplot() +
theme_void() +
theme(legend.position = "none")
ggplot(datasaurus_dozen, aes(x=x, y=dataset, colour=dataset)) +
geom_point() +
geom_boxplot() +
geom_smooth() +
theme_void() +
theme(legend.position = "none")
ggplot(datasaurus_dozen, aes(x=x, y=dataset, colour=dataset)) +
geom_point() +
geom_boxplot() +
theme_void() +
theme(legend.position = "none")
# scatter
ggplot(datasaurus_dozen, aes(x=x, y=y, colour=dataset)) + # la primera linea define los parametros del grafico, la data, coordenadas y color
geom_point() +                                        # en esta linea se define la geometria de la figura, en este caso un punto
theme_void() +                                        # aca definimos el tema del grafico
theme(legend.position = "none") +                     # quitamos la leyenda
facet_wrap(~dataset, ncol=3)                          # creamos un subgrafico por cada dataset
ggplot(datasaurus_dozen, aes(x=x,colour=dataset))+
geom_histogram()+                                    # cambio la geometria
theme_void()+
theme(legend.position = "none")+
facet_wrap(~dataset, ncol=3)
ggplot(datasaurus_dozen, aes(x=x,colour=dataset))+
geom_histogram(binwidth = 1)+                                    # cambio la geometria
theme_void()+
theme(legend.position = "none")+
facet_wrap(~dataset, ncol=3)
ggplot(datasaurus_dozen, aes(x=x,colour=dataset))+
geom_histogram(binwidth = 2)+                                    # cambio la geometria
theme_void()+
theme(legend.position = "none")+
facet_wrap(~dataset, ncol=3)
install.packages("FSinR")
install.packages("stuart")
knitr::opts_chunk$set(echo = TRUE)
library(stuart)
data(fairplayer)
fs <- list(ra = names(fairplayer)[53:57])
sel <- bruteforce(fairplayer, fs, 3,
cores = 1)  # number of cores set to 1
install.packages("lavan")
install.packages("lavaan")
data(fairplayer)
fs <- list(ra = names(fairplayer)[53:57])
sel <- bruteforce(fairplayer, fs, 3,
cores = 1)  # number of cores set to 1
summary(sel)  # Fit is perfect because of just-identified model
